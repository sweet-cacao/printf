#include "ft_printf.h"
//приоритет точки над нулем, если есть точка то пробелами заполняется ширина. флаги могут стоять ТОЛЬКО до цифр

#define SETMIN(chr, a) if (chr == '-') a.min = 1
#define SETHASH(chr, a) if (chr == '#') a.hash = 1
#define SETPLUS(chr, a) if (chr == '+') a.plus = 1
#define SETZERO(chr, a) if (chr == '0') a.zero = 1
#define SETSPACE(chr, a) if (chr == ' ') a.space = 1

t_list    flag_ignore(t_list a)
{
    if (a.min == 1)
        a.zero = 0;
    if (a.plus == 1 || a.min == 1)
        a.space = 0;
    if (a.precision > 0 || a.width > a.precision)
        a.zero = 0;
    return (a);
}

void    format_print_di(int arg, char *str, int start, int end)
{
    t_list a = zero_struct();
    int i = start;
    int number_length;
    while (first_flag(str[i]))
    {
        SETMIN(str[i], a);
        SETHASH(str[i], a);
        SETPLUS(str[i], a);
        SETZERO(str[i], a);
        SETSPACE(str[i], a);
        i++;
    }


    // printf("a.zero =%d\n", a.zero);
    // printf("a.min =%d\n", a.min);

    if (is_number(str[i]))
    {
        a.width = atoi(&str[i]);
        while(is_number(str[i]) || str[i] == '0')
            i++;
    }
    if (str[i] == '.') //только для float
    {
        i++;
        a.precision = atoi(&str[i]);
        while(is_number(str[i]) || str[i] == '0')
            i++;
    }
    a = flag_ignore(a);
    int len_arg;
    if (is_diouxX(str[i]))
    {
        len_arg = count_length(arg);
        if (a.min == 1)
        {
            if (arg < 0)
                len_arg++;
            if (arg > 0 && a.plus == 1)
            {
                ft_putchar('+');
                len_arg++;
            }
            if (a.width > len_arg && a.space == 1)
            {
                ft_putchar(' ');
                len_arg++;
            }
            int count = count_length(arg);
            while (a.precision - count > 0)
            {
                ft_putchar('0');
                count++;
                len_arg++;
            }
            ft_putnbr(arg);
            if (a.width > len_arg)
            {
                i = 0;
                while (i < (a.width - len_arg))
                {
                    ft_putchar(' ');
                    i++;
                }
            }
        }
        else if (a.min == 0)
        {
            i = 0;
            if (a.width > len_arg)
            {
                if (a.precision > len_arg)
                    len_arg = a.precision;
                if (a.plus == 1 || arg < 0)
                    len_arg++;
                if (a.zero == 1)
                {
                    if (arg < 0)
                    {
                        ft_putchar('-');
                        arg = -arg;
                    }
                    else if (arg > 0 && a.plus == 1)
                        ft_putchar('+');
                }
                int count = count_length(arg);

                while (i < (a.width - len_arg))
                {
                    if (a.zero == 1)
                        ft_putchar('0');
                    else
                        ft_putchar(' ');
                    i++;
                }
                if (arg > 0 && a.plus == 1 && a.zero == 0)
                    ft_putchar('+');
                while (a.precision - count > 0)
                {
                    ft_putchar('0');
                    count++;
                }
            }
            else if (a.width < len_arg)
            {
                if (a.space == 1 && arg > 0)
                    ft_putchar(' ');
                if (arg > 0 && a.plus == 1)
                    ft_putchar('+');
            }
            ft_putnbr(arg);
        }
    }
}
